test3 <- get_slam_year(2012)
test3 %>%
filter(complete_data == 0) %>%
View()
sum(test2$five_set_incomplete_comeback)
sum(test3$five_set_incomplete_comeback)
# -- test out function
# -- Look at one tournament, year
year = 2012
tournament = 'usopen'
path_to_data <- '/Users/petertea/Documents/Sports-Analytics/Sackmann/tennis_slam_pointbypoint/'
points_file_name <- paste(as.character(year), "-", as.character(tournament), "-points.csv", sep="")
matches_file_name <- paste(as.character(year), "-", as.character(tournament), "-matches.csv", sep=""  )
points_data <- read.csv(paste(path_to_data, points_file_name, sep = ''))
matches_data <- read.csv(paste(path_to_data, matches_file_name, sep = ''))
dummy_data <- points_data %>%
filter(match_id == '2012-usopen-1108')
View(dummy_data)
test4 <- get_slam_year(2015)
test4 %>%
filter(complete_data == 0) %>%
View()
# -- test out function
# -- Look at one tournament, year
year = 2015
tournament = 'wimbledon'
points_file_name <- paste(as.character(year), "-", as.character(tournament), "-points.csv", sep="")
matches_file_name <- paste(as.character(year), "-", as.character(tournament), "-matches.csv", sep=""  )
points_data <- read.csv(paste(path_to_data, points_file_name, sep = ''))
matches_data <- read.csv(paste(path_to_data, matches_file_name, sep = ''))
dummy_data <- points_data %>%
filter(match_id == '2015-wimbledon-1133')
(slam_data = dummy_data
)
slam_data = dummy_data
match_id = '2015-wimbledon-1133'
# -- Get sequence of which player won the set
set_sequence <- slam_data %>%
select(SetWinner) %>%
filter(SetWinner != 0)
set_sequence
# -- Collect summary data from the Grand Slams
library(dplyr)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
get_set_data <- function(slam_data, match_id, year, tournament,
player1_name, player2_name){
# slam_data: dataframe of one grand slam
# match_id: str of match
# year: int of year
# tournament: str of tournament name
# --Note:
# *SetWinner is an indicator on if player 1 or player 2 won the set
# -- Get sequence of which player won the set
set_sequence <- slam_data %>%
select(SetWinner) %>%
filter(SetWinner != 0)
player_winner_seq <- set_sequence$SetWinner
numsets <- length(unique(slam_data$SetNo))
# ***** Questionable... ***** #
# --Fix error of 2 sets (in ATP)
#if((numsets == 3) & (length(player_winner_seq) < 3)){
#  player_winner_seq[3] <- getmode(player_winner_seq)
#}
# --Fix error of 4 sets (in ATP)
#if((numsets == 4) & (length(player_winner_seq) == 3) ){
#  player_winner_seq[4] <- getmode(player_winner_seq)
#}
# ***** Questionable... ***** #
first_set_winner <- player_winner_seq[1]
second_set_winner <- player_winner_seq[2]
third_set_winner <- player_winner_seq[3]
# -- If sets went beyond 3
fourth_set_winner <- ifelse(numsets >=4,
player_winner_seq[4],
0)
fifth_set_winner <- ifelse(numsets == 5,
player_winner_seq[5],
0)
straight_set <- ifelse( (first_set_winner == second_set_winner) &(first_set_winner == third_set_winner),
1,0)
five_set_incomplete_comeback <-ifelse((first_set_winner == second_set_winner) &
(numsets == 5) &
(fifth_set_winner == first_set_winner),
1,0
)
five_set_complete_comeback <-ifelse((first_set_winner == second_set_winner) &
(numsets == 5) &
(fifth_set_winner != first_set_winner),
1,0)
# -- Did we get complete data?
if(length(player_winner_seq) == 0){
complete = 0
} else if(max(table(player_winner_seq)) < 3){
complete = 0
} else{
complete = 1
}
summary_data <- data.frame('match_id' = match_id,
'year' = year,
'tournament' = tournament,
'player1' = player1_name,
'player2' = player2_name,
'first_set_winner' = first_set_winner,
'second_set_winner' = second_set_winner,
'third_set_winner' = third_set_winner,
'fourth_set_winner' = fourth_set_winner,
'fifth_set_winner' = fifth_set_winner,
'straight_set' = straight_set,
'five_set_incomplete_comeback' = five_set_incomplete_comeback,
'five_set_complete_comeback' = five_set_complete_comeback,
'complete_data' = complete,
stringsAsFactors = FALSE
)
return(summary_data)
}
# -- test out function
# -- Look at one tournament, year
year = 2015
tournament = 'wimbledon'
path_to_data <- '/Users/petertea/Documents/Sports-Analytics/Sackmann/tennis_slam_pointbypoint/'
points_file_name <- paste(as.character(year), "-", as.character(tournament), "-points.csv", sep="")
matches_file_name <- paste(as.character(year), "-", as.character(tournament), "-matches.csv", sep=""  )
points_data <- read.csv(paste(path_to_data, points_file_name, sep = ''))
matches_data <- read.csv(paste(path_to_data, matches_file_name, sep = ''))
dummy_data <- points_data %>%
filter(match_id == '2015-wimbledon-1133')
slam_data = dummy_data
# -- Get sequence of which player won the set
set_sequence <- slam_data %>%
select(SetWinner) %>%
filter(SetWinner != 0)
set_sequence
View(matches_data)
# -- Collect summary data from the Grand Slams
library(dplyr)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
get_set_data <- function(slam_data, match_id, year, tournament,
player1_name, player2_name){
# slam_data: dataframe of one grand slam
# match_id: str of match
# year: int of year
# tournament: str of tournament name
# --Note:
# *SetWinner is an indicator on if player 1 or player 2 won the set
# -- Get sequence of which player won the set
set_sequence <- slam_data %>%
select(SetWinner) %>%
filter(SetWinner != 0)
player_winner_seq <- set_sequence$SetWinner
numsets <- length(unique(slam_data$SetNo))
# ***** Questionable... ***** #
# --Fix error of 2 sets (in ATP)
#if((numsets == 3) & (length(player_winner_seq) < 3)){
#  player_winner_seq[3] <- getmode(player_winner_seq)
#}
# --Fix error of 4 sets (in ATP)
#if((numsets == 4) & (length(player_winner_seq) == 3) ){
#  player_winner_seq[4] <- getmode(player_winner_seq)
#}
# ***** Questionable... ***** #
first_set_winner <- player_winner_seq[1]
second_set_winner <- player_winner_seq[2]
third_set_winner <- player_winner_seq[3]
# -- If sets went beyond 3
fourth_set_winner <- ifelse(numsets >=4,
player_winner_seq[4],
0)
fifth_set_winner <- ifelse(numsets == 5,
player_winner_seq[5],
0)
straight_set <- ifelse( (first_set_winner == second_set_winner) &(first_set_winner == third_set_winner),
1,0)
five_set_incomplete_comeback <-ifelse((first_set_winner == second_set_winner) &
(numsets == 5) &
(fifth_set_winner == first_set_winner),
1,0
)
five_set_complete_comeback <-ifelse((first_set_winner == second_set_winner) &
(numsets == 5) &
(fifth_set_winner != first_set_winner),
1,0)
# -- Did we get complete data?
if(length(player_winner_seq) == 0){
complete = 0
} else if(max(table(player_winner_seq)) < 3){
complete = 0
} else{
complete = 1
}
summary_data <- data.frame('match_id' = match_id,
'year' = year,
'tournament' = tournament,
'player1' = player1_name,
'player2' = player2_name,
'first_set_winner' = first_set_winner,
'second_set_winner' = second_set_winner,
'third_set_winner' = third_set_winner,
'fourth_set_winner' = fourth_set_winner,
'fifth_set_winner' = fifth_set_winner,
'straight_set' = straight_set,
'five_set_incomplete_comeback' = five_set_incomplete_comeback,
'five_set_complete_comeback' = five_set_complete_comeback,
'complete_data' = complete,
stringsAsFactors = FALSE
)
return(summary_data)
}
# -- test out function
# -- Look at one tournament, year
year = 2015
tournament = 'wimbledon'
path_to_data <- '/Users/petertea/Documents/Sports-Analytics/Sackmann/tennis_slam_pointbypoint/'
points_file_name <- paste(as.character(year), "-", as.character(tournament), "-points.csv", sep="")
matches_file_name <- paste(as.character(year), "-", as.character(tournament), "-matches.csv", sep=""  )
points_data <- read.csv(paste(path_to_data, points_file_name, sep = ''))
matches_data <- read.csv(paste(path_to_data, matches_file_name, sep = ''))
dummy_data <- points_data %>%
filter(match_id == '2015-wimbledon-1133')
test1 = get_set_data(slam_data = dummy_data ,match_id = '2015-wimbledon-1133',
year = year, tournament = tournament,
player1_name = 'Vanni',
player2_name ='Ward')
test1
## -- Get set data for an entire tournament
get_slam_data <- function(slam_point_data, slam_meta_data, year, tournament){
# -- Flag for ATP matches only
atp_match <- ifelse(slam_meta_data$match_num < 2100, 1,0)
atp_slam_meta_data <- slam_meta_data %>%
mutate(atp_flag = atp_match) %>%
filter(atp_match == 1)
list_match_ids <- as.character(atp_slam_meta_data$match_id)
player1_list <- as.character(atp_slam_meta_data$player1)
player2_list <- as.character(atp_slam_meta_data$player2)
round <- as.character(atp_slam_meta_data$round)
match_status <- as.character(atp_slam_meta_data$status)
datalist = list()
for(index in 1:length(list_match_ids)){
current_match_id <- list_match_ids[index]
slam_data <- slam_point_data %>%
filter(match_id == current_match_id)
player1_name <- player1_list[index]
player2_name <- player2_list[index]
datalist[[index]] <- get_set_data(slam_data = slam_data, match_id = current_match_id,
year = year, tournament = tournament,
player1_name = player1_name, player2_name = player2_name)
}
all_data <- do.call(rbind, datalist)
all_data$round <- round
all_data$match_status <- match_status
return(all_data)
}
test2 <- get_slam_data(slam_point_data = points_data,
slam_meta_data = matches_data,
year = 2012,
tournament = 'wimbledon')
View(test2)
test2 %>%
filter(complete_data == 0) %>%
View()
test2 <- get_slam_data(slam_point_data = points_data,
slam_meta_data = matches_data,
year = 2012,
tournament = 'wimbledon')
test2 %>%
filter(complete_data == 0) %>%
View()
test2 <- get_slam_data(slam_point_data = points_data,
slam_meta_data = matches_data,
year = 2012,
tournament = 'wimbledon')
test2 %>%
filter(complete_data == 0) %>%
View()
dummy_data <- points_data %>%
filter(match_id == '2015-wimbledon-1123')
slam_data = dummy_data
View(slam_data)
View(points_data)
get_slam_year <- function(year){
grand_slam_names <- c('ausopen', 'frenchopen', 'usopen', 'wimbledon')
path_to_data <- '/Users/petertea/Documents/Sports-Analytics/Sackmann/tennis_slam_pointbypoint/'
datalist <- list()
for(index in 1:length(grand_slam_names)){
tournament <- grand_slam_names[index]
points_file_name <- paste(as.character(year), "-", as.character(tournament), "-points.csv", sep="")
matches_file_name <- paste(as.character(year), "-", as.character(tournament), "-matches.csv", sep="")
points_data <- read.csv(paste(path_to_data, points_file_name, sep = ''))
matches_data <- read.csv(paste(path_to_data, matches_file_name, sep = ''))
datalist[[index]] <- get_slam_data(slam_point_data = points_data,
slam_meta_data = matches_data,
year = year,
tournament = tournament)
}
all_data <- do.call(rbind, datalist)
return(all_data)
}
test3 <- get_slam_year(2012)
test3 %>%
filter(complete_data == 0) %>%
View()
test3 %>%
filter(complete_data == 1) %>%
%>% select(five_set_incomplete_comeback)
test3 %>%
filter(complete_data == 1) %
test3 %>%
filter(complete_data == 1)
test3 %>%
filter(complete_data == 1) %>%
select(five_set_incomplete_comeback)
test3 %>%
filter(complete_data == 1) %>%
select(five_set_incomplete_comeback) %>%
sum()
test3 %>%
filter(complete_data == 1) %>%
View()
test3 %>%
filter(complete_data == 1) %>%
select(five_set_incomplete_comeback) %>%
sum(na.rm = TRUE)
setwd("~/Documents/GitHub/match-analysis/src")
# -- How often do players bounce back when trailing 2 sets to love?
source("~/Documents/GitHub/match-analysis/src/collect_set_data.R")
atp_grand_sets <- get_all_atp_set_data(years = 2011:2019)
# -- How often do players bounce back when trailing 2 sets to love?
source("~/Documents/GitHub/match-analysis/src/collect_set_data.R")
atp_grand_sets <- get_all_atp_set_data(years = 2011:2019)
View(atp_grand_sets)
atp_complete <- atp_grand_sets %>%
filter(complete_data==1)
View(atp_complete)
atp_complete %>%
group_by(year) %>%
summarise(matches = n(na.rm = T))
atp_complete %>%
group_by(year) %>%
summarise(matches = n())
View(atp_grand_sets)
atp_grand_sets %>%
group_by(year) %>%
summarise(matches = n())
atp_grand_sets %>%
filter(year ==2019) %>%
View()
year = 2012
tournament = 'wimbledon'
path_to_data <- '/Users/petertea/Documents/Sports-Analytics/Sackmann/tennis_slam_pointbypoint/'
points_file_name <- paste(as.character(year), "-", as.character(tournament), "-points.csv", sep="")
matches_file_name <- paste(as.character(year), "-", as.character(tournament), "-matches.csv", sep=""  )
points_data <- read.csv(paste(path_to_data, points_file_name, sep = ''))
matches_data <- read.csv(paste(path_to_data, matches_file_name, sep = ''))
dummy_data <- points_data %>%
filter(match_id == '2012-wimbledon-1701')
View(dummy_data)
diff(dummy_data$SetNo)
which(diff(dummy_data$SetNo) == 1)
to_see = which(diff(dummy_data$SetNo) == 1)
dummy_data[to_see,]
dummy_data[to_see,] %>%
View()
# -- Test set
year = 2019
tournament = 'wimbledon'
path_to_data <- '/Users/petertea/Documents/Sports-Analytics/Sackmann/tennis_slam_pointbypoint/'
points_file_name <- paste(as.character(year), "-", as.character(tournament), "-points.csv", sep="")
matches_file_name <- paste(as.character(year), "-", as.character(tournament), "-matches.csv", sep=""  )
points_data <- read.csv(paste(path_to_data, points_file_name, sep = ''))
matches_data <- read.csv(paste(path_to_data, matches_file_name, sep = ''))
dummy_data2 <- points_data %>%
filter(match_id == '2019-wimbledon-1701')
View(dummy_data2)
dummy_data$P1Score
n <- nrow(dummy_data)
n
new_P1Score <- dummy_data$P1Score[c(n, 1:(n -1 ))]
new_P2Score <- dummy_data$P2Score[c(n, 1:(n -1 ))]
dummy_data$P1Score <- new_P1Score
dummy_data$P1Score <- new_P1Score
View(dummy_data)
dummy_data <- points_data %>%
filter(match_id == '2012-wimbledon-1701')
n <- nrow(dummy_data)
new_P1Score <- dummy_data$P1Score[c(n, 1:(n -1 ))]
n <- nrow(dummy_data)
n
# -- Test set
year = 2012
tournament = 'wimbledon'
path_to_data <- '/Users/petertea/Documents/Sports-Analytics/Sackmann/tennis_slam_pointbypoint/'
points_file_name <- paste(as.character(year), "-", as.character(tournament), "-points.csv", sep="")
matches_file_name <- paste(as.character(year), "-", as.character(tournament), "-matches.csv", sep=""  )
points_data <- read.csv(paste(path_to_data, points_file_name, sep = ''))
matches_data <- read.csv(paste(path_to_data, matches_file_name, sep = ''))
dummy_data <- points_data %>%
filter(match_id == '2012-wimbledon-1701')
dummy_data[to_see,] %>%
View()
n <- nrow(dummy_data)
n
new_P1Score <- dummy_data$P1Score[c(n, 1:(n -1 ))]
new_P2Score <- dummy_data$P2Score[c(n, 1:(n -1 ))]
new_P1Score
dummy_data$P1Score <- new_P1Score
dummy_data$P1Score <- new_P1Score
new_P1Score <- dummy_data$P1Score[c(n, 1:(n -1 ))]
new_P2Score <- dummy_data$P2Score[c(n, 1:(n -1 ))]
dummy_data$P1Score <- new_P1Score
dummy_data$P2Score <- new_P2Score
dummy_data <- points_data %>%
filter(match_id == '2012-wimbledon-1701')
n <- nrow(dummy_data)
new_P1Score <- dummy_data$P1Score[c(n, 1:(n -1 ))]
new_P2Score <- dummy_data$P2Score[c(n, 1:(n -1 ))]
dummy_data$P1Score <- new_P1Score
dummy_data$P2Score <- new_P2Score
dummy_data[to_see,] %>%
View()
to_see = which(diff(dummy_data$SetNo) == 1) + 1
dummy_data[to_see,] %>%
View()
to_see = which(diff(dummy_data$SetNo) == 1)
dummy_data[to_see,] %>%
View()
to_see <-c(to_see, nrow(dummy_data))
to_see
setwinners <- dummy_data[to_see,] %>% select(PointWinner)
setwinners
# Check if last point played was a game point or break point
# --> Add grouped score column
source("~/Documents/Github/serve_speeds/src/grouped_score.R")
dummy_data$grouped_score <- mapply(dummy_data$P1Score,
dummy_data$P2Score,
FUN = get_grouped_score)
dummy_data[1, 'P1Score']
dummy_data[nrow(dummy_data), 'P1Score']
get_grouped_score(dummy_data[nrow(dummy_data), 'P1Score'],
dummy_data[nrow(dummy_data), 'P2Score'])
score1 <- as.character(dummy_data[nrow(dummy_data), 'P1Score'])
score1
score2 <-as.character(dummy_data[nrow(dummy_data), 'P2Score'])
score2
get_grouped_score(score1, score2)
server_score = score1
returner_score = score2
# --> Game Point
if(server_score == 'AD'){
return('Game Point')
}
# --> Break Point
if(returner_score == 'AD'){
return('Break Point')
}
server_score = as.numeric(levels(server_score))[server_score]
server_score
score1 <- dummy_data[nrow(dummy_data), 'P1Score']
score2 <- dummy_data[nrow(dummy_data), 'P2Score']
score1
score2 <- dummy_data[nrow(dummy_data), 'P2Score']
server_score = as.numeric(levels(score1))[score1]
levels(score1)
as.numeric(levels(score1))
dummy_data$grouped_score <- mapply(dummy_data$P1Score,
dummy_data$P2Score,
FUN = get_grouped_score)
dummy_data[nrow(dummy_data), 'grouped_score']
if(final_point == 'Game Point'){
print('sda')
}
final_point <- dummy_data[nrow(dummy_data), 'grouped_score']
if(final_point == 'Game Point'){
print('sda')
}
# -- Test set
year = 2012
tournament = 'wimbledon'
path_to_data <- '/Users/petertea/Documents/Sports-Analytics/Sackmann/tennis_slam_pointbypoint/'
points_file_name <- paste(as.character(year), "-", as.character(tournament), "-points.csv", sep="")
matches_file_name <- paste(as.character(year), "-", as.character(tournament), "-matches.csv", sep=""  )
points_data <- read.csv(paste(path_to_data, points_file_name, sep = ''))
matches_data <- read.csv(paste(path_to_data, matches_file_name, sep = ''))
dummy_data <- points_data %>%
filter(match_id == '2012-wimbledon-1701')
# Indices of last point of each set except last one
to_see = which(diff(dummy_data$SetNo) == 1)
to_seeee
to_see
# Check if last point played was a game point or break point
# --> Add grouped score column
source("~/Documents/Github/serve_speeds/src/grouped_score.R")
n <- nrow(dummy_data)
new_P1Score <- dummy_data$P1Score[c(n, 1:(n -1 ))]
new_P2Score <- dummy_data$P2Score[c(n, 1:(n -1 ))]
dummy_data$P1Score <- new_P1Score
dummy_data$P2Score <- new_P2Score
dummy_data$grouped_score <- mapply(dummy_data$P1Score,
dummy_data$P2Score,
FUN = get_grouped_score)
final_point <- dummy_data[nrow(dummy_data), 'grouped_score']
if( (final_point == 'Game Point') |  (final_point == 'Break Point')){
to_see <-c(to_see, nrow(dummy_data))
}
setwinners <- dummy_data[to_see,] %>% select(PointWinner)
setwinners
dummy_data[to_see,] %>%
View()
